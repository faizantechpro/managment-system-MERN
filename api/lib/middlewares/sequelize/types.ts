import { OptionalNullable, PartialSet } from 'lib/utils';

// DO NOT USE. This is only included since generator can't import from libs
export type Includeable = {};

/**
 * Older models which used underscored: true
 * @deprecated
 */
export type ModelTimestamp = {
  created_at: Date;
  updated_at: Date;
};
/**
 * Older model options which used under scored fields.
 * @deprecated
 */
export const defaultModelOptions = {
  underscored: true,
  timestamps: true,
  createdAt: 'created_at',
  updatedAt: 'updated_at',
};

export type Timestamp = {
  createdAt: Date;
  updatedAt: Date;
};
export const camelModelOptions = {
  underscored: false,
  timestamps: true,
};

/**
 * Creates the proper type for a sequelize input create model.
 *
 * OmitKeys correspond to keys that are not allowed to be set on create.
 * GeneratedKeys correspond to keys that will be auto generated by the database and/or sequelize
 * DefaultKeys correspond to keys that will be set to a default value by the database and/or sequelize
 */
export type ToCreateType<
  T,
  OmitKeys extends keyof T | never, // keys to omit, e.g. 'deleted' flag should never be allowed ot be provided
  GeneratedKeys extends keyof T | never, // keys generated by db and/or sequelize
  DefaultKeys extends keyof T | never // keys with a default value
> = OptionalNullable<
  Omit<
    T,
    | keyof Timestamp
    | keyof ModelTimestamp
    | OmitKeys
    | GeneratedKeys
    | DefaultKeys
  >
> &
  PartialSet<T, Exclude<DefaultKeys, never>>;
export type ToModifyType<T, OmitKeys extends keyof T> = Partial<
  Omit<T, OmitKeys>
>;

/**
 * The following are common query parameters used throughout Biz/DAO layers.
 *
 * Note: These should not contain common queries used in Routes layer such as
 * `self`.
 */

/**
 * Possible sort orders by basic asc or desc, along with nulls first or last.
 */
export type SortOrder =
  | 'asc'
  | 'asc nulls first'
  | 'asc nulls last'
  | 'desc'
  | 'desc nulls first'
  | 'desc nulls last';

/**
 * Allows ordering by a column in ascending or descending order.
 * And will also allow ordering by nulls first or last if needed.
 */
export type Order = [string, SortOrder];
/**
 * Value provided is used to perform an ILIKE search on fields such as:
 * * title
 * * description
 * * name
 *
 * Dependent on the resource being queried.
 */
export type Search = string;
/**
 * Whether favorites should be included in the response.
 * If self=true, favorites will be limited to the current user.
 * Else, favorites will include all users who have favorited the course.
 */
export type Favorites = boolean;
/**
 * Whether progress should be included in the response.
 * If self=true, progress will be limited to the current user.
 * Else, progress will all course attempts.
 */
export type Progress = boolean;
